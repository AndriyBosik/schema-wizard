plugins {
    id 'java'
}

group 'org.schema-wizard'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    queryTest {
        java.srcDir "$projectDir/src/query-test/java"
        resources.srcDir "$projectDir/src/query-test/resources"
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

ext {
    snakeyamlVersion = '2.2'
    guavaVersion = '32.1.3-jre'
    slf4jVersion = '2.0.5'
    junitVersion = '5.10.0'
    mockitoVersion = '5.4.0'
    testContainersVersion = '1.20.0'
    postgresqlVersion = '42.7.4'
    oracleVersion = '23.5.0.24.07'
    mysqlVersion = '8.0.33'
    reflectionsVersion = '0.10.2'
    dbUnitVersion = '2.8.0'
    dbRiderVersion = '1.44.0'
}

dependencies {
    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"
    implementation "org.reflections:reflections:${reflectionsVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation platform("org.testcontainers:testcontainers-bom:${testContainersVersion}")
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:oracle-free'
    testImplementation 'org.testcontainers:mysql'
    testImplementation "org.dbunit:dbunit:${dbUnitVersion}"
    testRuntimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
    testRuntimeOnly "com.oracle.database.jdbc:ojdbc11:${oracleVersion}"
    testImplementation "mysql:mysql-connector-java:${mysqlVersion}"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation "com.github.database-rider:rider-junit5:${dbRiderVersion}"

    queryTestImplementation platform("org.junit:junit-bom:${junitVersion}")
    queryTestImplementation "org.reflections:reflections:${reflectionsVersion}"
    queryTestImplementation 'org.junit.jupiter:junit-jupiter-api'
    queryTestImplementation "org.mockito:mockito-core:${mockitoVersion}"
    queryTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.register('queryTest', Test) {
    testClassesDirs = sourceSets.queryTest.output.classesDirs
    classpath = sourceSets.queryTest.runtimeClasspath
}

check.dependsOn queryTest

test {
    useJUnitPlatform()
}

queryTest {
    useJUnitPlatform()
    afterTest { descriptor, result ->
        logger.info "Executing test ${descriptor.name} [${descriptor.className}] with result: ${result.resultType}"
    }
    afterSuite { descriptor, result ->
        if (!descriptor.parent) {
            logger.info "${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}
